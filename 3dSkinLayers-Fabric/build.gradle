plugins {
	id 'fabric-loom' version '0.7-SNAPSHOT'
	id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
    maven { url 'https://jitpack.io' } //fabric asm
    maven {
        url "https://repo.codemc.io/repository/maven-public/"
    }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

project.evaluationDependsOn(':3dSkinLayers-Shared')

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	sourceSets.main.java.srcDirs += (project(':3dSkinLayers-Shared').sourceSets.main.java.srcDirs)
	sourceSets.main.resources.srcDirs += (project(':3dSkinLayers-Shared').sourceSets.main.resources.srcDirs)
}

minecraft {
	refmapName = "3dskinlayers.refmap.json"
}

processResources {
	inputs.property "version", project.version

	from "${project.rootDir}/LICENSE"

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

java {
	toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
	from {
		duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
		}
	}

}
